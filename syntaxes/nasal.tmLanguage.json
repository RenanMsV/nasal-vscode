{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Nasal",
    "scopeName": "source.nasal",
    "fileTypes": ["nas"],
    "patterns": [
        {
            "include": "#general"
        },
        {
            "include": "#funcs-core"
        },
        {
            "include": "#funcs-core-fg-ext"
        },
        {
            "include": "#vars-core-fg-ext"
        },
        {
            "include": "#funcs-fg-math"
        },
        {
            "include": "#funcs-fg-props"
        },
        {
            "include": "#funcs-fg-clipboard"
        },
        {
            "include": "#funcs-fg-debug"
        },
        {
            "include": "#funcs-fg-geo"
        },
        {
            "include": "#funcs-fg-io"
        },
        {
            "include": "#funcs-fg-ospath"
        },
        {
            "include": "#funcs-fg-gui"
        }
    ],
    "repository": {
        "general": {
            "patterns": [
                {
                    "name": "keyword.control.nasal",
                    "match": "\\b(if|else|elsif|while|for|foreach|forindex|break|continue|and|or)\\b"
                },
                {
                    "name": "keyword.control.nasal",
                    "match": "!|\\*|\\-|\\+|~|/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(and|or)\\b"
                },
                {
                    "name": "variable.language.nasal",
                    "match": "\\b(me|arg|parents|obj)\\b"
                },
                {
                    "name": "storage.type.nas",
                    "match": "\\b(func|return|var|nil)\\b"
                },
                {
                    "begin": "'",
                    "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.nasal" } },
                    "end": "'",
                    "endCaptures": { "0": { "name": "punctuation.definition.string.end.nasal" } },
                    "name": "string.quoted.single.nasal",
                    "patterns": [
                        {
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.nasal"
                        }
                    ]
                },
                {
                    "begin": "\"",
                    "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.nasal" } },
                    "end": "\"",
                    "endCaptures": { "0": { "name": "punctuation.definition.string.end.nasal" } },
                    "name": "string.quoted.double.nasal",
                    "patterns": [
                        {
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.nasal"
                        }
                    ]
                },
                {
                    "begin": "`",
                    "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.nasal" } },
                    "end": "`",
                    "endCaptures": { "0": { "name": "punctuation.definition.string.end.nasal" } },
                    "name": "string.quoted.backtick.nasal",
                    "patterns": [
                        {
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.nasal"
                        }
                    ]
                },
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.nasal"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.nasal"
                        }
                    },
                    "name": "string.quoted.double.nasal",
                    "patterns": [
                        {
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.nasal"
                        }
                    ]
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.nasal"
                        }
                    },
                    "match": "(#).*$\\n?",
                    "name": "comment.line.hash.nasal"
                },
                {
                    "name": "constant.numeric.nasal",
                    "match": "((\\b[0-9]+)?\\.)?\\b[0-9]+([eE][-+]?[0-9]+)?\\b"
                },
                {
                    "name": "constant.numeric.nasal",
                    "match": "0[x|X][0-9a-fA-F]+"
                },
                {
                    "match": "\\{|\\}",
                    "name": "meta.brace.curly.nasal"
                },
                {
                    "match": "\\(|\\)",
                    "name": "meta.brace.round.nasal"
                },
                {
                    "match": "\\[|\\]",
                    "name": "meta.brace.square.nasal"
                }
            ]
        },
        "funcs-core": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof)\\b"
                }
            ]
        },
        "funcs-core-fg-ext": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b"
                },
                {
                    "name": "variable.language.nasal",
                    "match": "\\b(singleShot|isRunning|simulatedTime)\\b"
                }
            ]
        },
        "vars-core-fg-ext": {
            "patterns": [
                {
                    "name": "constant.language.nasal",
                    "match": "\\b(D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b"
                }
            ]
        },
        "funcs-fg-math": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(abs|acos|asin|atan2|avg|ceil|clamp|cos|exp|floor|fmod|in|log10|max|min|mod|periodic|pow|round|sin|sgn|sqrt|tan)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(math)\\b"
                },
                {
                    "name": "variable.language.nasal",
                    "match": "\\b(e|pi)\\b"
                }
            ]
        },
        "funcs-fg-props": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(new|addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(Node)\\b"
                },
                {
                    "name": "variable.language.nasal",
                    "match": "\\b(props|globals)\\b"
                }
            ]
        },
        "funcs-fg-clipboard": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(getText|setText)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(clipboard)\\b"
                },
                {
                    "name": "constant.language.nasal",
                    "match": "\\b(CLIPBOARD|SELECTION)\\b"
                }
            ]
        },
        "funcs-fg-debug": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(attributes|backtrace|bt|benchmark|benchmark_time|dump|isnan|local|print_rank|printerror|propify|proptrace|rank|string|tree|warn|new|enable|disable|getHits|hit)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(debug|Breakpoint)\\b"
                }
            ]
        },
        "funcs-fg-geo": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(new|set|set_lat|set_lon|set_alt|set_latlon|set_x|set_y|set_z|set_xyz|lat|lon|alt|latlon|x|y|z|xyz|is_defined|dump|course_to|distance_to|direct_distance_to|apply_course_distance|test|update|_equals|aircraft_position|click_position|elevation|format|normdeg|normdeg180|put_model|tile_index|tile_path|viewer_position)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(geo|PositionedSearch|Coord)\\b"
                },
                {
                    "name": "constant.language.nasal",
                    "match": "\\b(ERAD)\\b"
                }
            ]
        },
        "funcs-fg-io": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(basename|close|dirname|flush|include|load_nasal|open|read|read_airport_properties|read_properties|readfile|readln|readxml|seek|stat|tell|write|write_properties|writexml)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(io)\\b"
                },
                {
                    "name": "constant.language.nasal",
                    "match": "\\b(SEEK_CUR|SEEK_END|SEEK_SET)\\b"
                }
            ]
        },
        "funcs-fg-ospath": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(new|set|append|concat|exists|canRead|canWrite|isFile|isDir|isRelative|isAbsolute|isNull|create_dir|remove|rename|realpath|file|dir|base|file_base|extension|lower_extension|complete_lower_extension|str|mtime)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(os\\.path)\\b"
                }
            ]
        },
        "funcs-fg-gui": {
            "patterns": [
                {
                    "name": "entity.name.function.nasal",
                    "match": "\\b(popupTip|showDialog|menuEnable|menuBind|setCursor|findElementByName|fpsDisplay|latencyDisplay|popdown|set|setColor|setFont|setBinding|state|del|load|toggle|is_open|reinit|rescan|select|next|previous|set_title|set_button|set_directory|set_file|set_dotfiles|set_pattern|save_flight|load_flight|set_screenshotdir|property_browser|dialog_apply|dialog_update|enable_widgets|nextStyle|setWeight|setWeightOpts|weightChangeHandler|showWeightDialog|showHelpDialog)\\b"
                },
                {
                    "name": "entity.name.class.nasal",
                    "match": "\\b(gui|Widget|Dialog|OverlaySelector|FileSelector|DirSelector)\\b"
                }
            ]
        }
    }
}
